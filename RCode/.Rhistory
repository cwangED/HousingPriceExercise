library()
librarys
librarys()
library()
datasets
datasets()
version
clc
clear
cls
library.dynam()
quit()
getwd()
setwd('~/Desktop/amazonInterview/RCode/')
getwd()
trStruc
trStruc.name <- "trainFile.csv"
teStruc.name <- "testFile.csv"
# Read data
trStruc.Data <- read.csv(paste(dataDir, trStruc.name, sep=""),
# Following the experiments in my Matlab code, we continue with the our regression model.
# Because of the limit of time, I won't perform a complicated experiment as I did in Matlab.
# Just a simple SVM regression (SVR) model and calculate the RMS error.
""
# 1. load and clean data
# Set Paths
dataDir <- "~/Desktop/amazonInterview/RCode/"
dataDir <- "/home/cwang/Desktop/amazonInterview/RCode/"
trStruc.name <- "trainFile.csv"
teStruc.name <- "testFile.csv"
# Read data
trStruc.Data <- read.csv(paste(dataDir, trStruc.name, sep=""),
header = FALSE, sep = ", ")
teStruc.Data <- read.csv(paste(dataDir, teStruc.name, sep=""),
header = False, sep = ", ")
clc
clear
source('~/Desktop/amazonInterview/RCode/housingPriceAna.R')
paste(dataDir, trStruc.name, sep="")
trStruc.Data <- read.csv(paste(dataDir, trStruc.name, sep=""),
header = FALSE, sep = ", ")
header = False, sep = ",")
header = FALSE)
header = FALSE)
teStruc.Data <- read.csv(paste(dataDir, teStruc.name, sep=""), header = FALSE)
teStruc
teStruc.Data
source('~/Desktop/amazonInterview/RCode/housingPriceAna.R', echo=TRUE)
summary(trStruc.Data)
summary(teStruc.Data)
head(trStruc.Data)
min(trStruc.Data[:, 1])
min(trStruc.Data(:, 1)
min(trStruc.Data(:, 1)
min(trStruc.Data)
min(trStruc.Data(:, 1))
trStruc.Data[1]
trStruc.Data[0]
trStruc.Data[2]
typeof(stStruc)
typeof(trStruc)
typeof(trStruc.Data)
typeof(teStruc.Data)
trStruc.Data[1]
trStruc.Data[[1]
]
trStruc.Data$V1
trStruc.Data$V2
attach(mtcars)
mtcars(order(npg),)
library(mtcars)
source(mtcars)
dataset(mtcars)
datasets(mtcars)
data(mtcars)
mtcars(order(mpg),)
mtcars[order(mpg),]
type(mtcars)
summary(mtcars)
head(mtcars)
head(trStruc.Data)
source('~/Desktop/amazonInterview/RCode/housingPriceAna.R', echo=TRUE)
head(trStruc.Data)
source('~/Desktop/amazonInterview/RCode/housingPriceAna.R', echo=TRUE)
source('~/Desktop/amazonInterview/RCode/housingPriceAna.R', echo=TRUE)
source('~/Desktop/amazonInterview/RCode/housingPriceAna.R', echo=TRUE)
source('~/Desktop/amazonInterview/RCode/housingPriceAna.R', echo=TRUE)
colnames(trStruc.Data) <- c("Price", "Date", "Type", "London", "Lease")
trStruc.Data <- trStruc.Data[order(trStruc.Data$Date)]
colnames(trStruc.Data) <- c("Price", "Date", "Type", "London", "Lease")
trStruc.Data
head(trStruc.Data)
head(trStruc.Data$Date)
trStruc.Data <- trStruc.Data[order(trStruc.Data$Date)]
trStruc.Data <- trStruc.Data[order(trStruc.Data$Date), ]
head(trStruc.Data)
trStruc.Data$Date <- trStruc.Data$Date - as.numeric(as.POSIXct("1/1/1995", format = "%d%m%Y"))
head(trStruc.Data)
type(trStruc.Data$Price)
is.numeric(trStruc.Data$Price)
is.numeric(trStruc.Data$Date)
as.numeric(as.POSIXct("1/1/1995", format = "%d%m%Y"))
as.numeric(as.date("1/1/1995"))
as.numeric(as.Date("1/1/1995"))
as.numeric(as.Date("1995-01-01"))
min(trStruc.Data$Date)
source('~/Desktop/amazonInterview/RCode/housingPriceAna.R', echo=TRUE)
min(trStruc.Data$Date)
source('~/Desktop/amazonInterview/RCode/housingPriceAna.R', echo=TRUE)
head(trStruc.Data)
source('~/Desktop/amazonInterview/RCode/housingPriceAna.R', echo=TRUE)
head(teStruc.Data)
tail(trStruc.Data)
source('~/Desktop/amazonInterview/RCode/housingPriceAna.R', echo=TRUE)
head(teStruc.Data)
source('~/Desktop/amazonInterview/RCode/housingPriceAna.R', echo=TRUE)
head(teStruc.Data)
source('~/Desktop/amazonInterview/RCode/housingPriceAna.R', echo=TRUE)
head(teStruc.Data)
head(trStruc.Data)
source('~/Desktop/amazonInterview/RCode/housingPriceAna.R', echo=TRUE)
head(trStruc.Data)
head(teStruc.Data)
source('~/Desktop/amazonInterview/RCode/housingPriceAna.R', echo=TRUE)
head(teStruc.Data)
# Set feature and value
teStruc.X = teStruc.Data[ , 2:5]
teStruc.Y = teStruc.Data[, 1]
head(teStruc.X)
head(teStruc.Y)
library(e1701)
install.packages(e1701)
install.packages('e1701')
library(e1701)
install.packages("e1071", dep = TRUE, type = "source")
library(e1701)
library('e1701')
install.packages("e1071")
source(e1701)
source('e1701')
library(e1701)
install.packages("e1071", dependencies = TRUE)
library(e1701)
library(e1071)
library('e1071')
# Set feature and value
trStruc.X = trStruc.Data[, 2:5]
trStruc.Y = trStruc.Data[, 1]
teStruc.X = teStruc.Data[ , 2:5]
teStruc.Y = teStruc.Data[, 1]
# 2. fit the model
model <- svm(trStruc.X, trStruc.Y)
trStruc.fittedY = predict(model, trStruc.X)
points(trStruc.X$Date, trStruc.Y, col = "blue", pch = 4)
install.packages(ggplot)
"ggplot2"
install.packages(ggplot2)
library(ggplot2)
install.packages('ggplot2')
plot(trStruc.X$Date, trStruc.Y)
svStruc.trY <- predict(svStruc.model, trStruc.X)
# 2. fit the model
model <- svm(trStruc.X, trStruc.Y)
svStruc.trY <- predict(model, trStruc.X)
points(trStruc.X, svStruc.trY)
svStruc.model <- svm(trStruc.X, trStruc.Y)
svStruc.trY <- predict(svStruc.model, trStruc.X)
points(trStruc.X, svStruc.trY)
points(trStruc.X$Date, svStruc.trY)
points(trStruc.X$Date, svStruc.trY, col="blue")
points(trStruc.X$Date, svStruc.trY, col="blue", pch=4)
svStruc.trErrors <- trStruc.Y-svStruc.trY
svStruc.trErrors
svStruc.trErrors <- trStruc.Y-svStruc.trY
svStruc.trError <- rmse(svStruc.trErrors)
svStruc.trError <- sqrt(mean(svStruc.trErrors^2))
svStruc.trError
print (svStruc.trError)
print (paste('EMS error is: ', svStruc.trError, sep = ""))
# 3. test the model
svStruc.teY = predict(svStruc.model, teStruc.X)
svStruc.teErrors <- teStruc.Y-svStruc.teY
svStruc.teError <- sqrt(mean(svStruc.teErrors^2))
print (paste('Testing RMS error is: ', svStruc.teError, sep = ""))
install.packages("rmarkdown")
library(rmarkdown)
install.packages("knitr")
library(knitr)
library(e1071)
dataDir <- "/home/cwang/Desktop/amazonInterview/RCode/"
trStruc.name <- "trainFile.csv"
teStruc.name <- "testFile.csv"
trStruc.Data <- read.csv(paste(dataDir, trStruc.name, sep=""), header = FALSE)
teStruc.Data <- read.csv(paste(dataDir, teStruc.name, sep=""), header = FALSE)
colnames(trStruc.Data) <- c("Price", "Date", "Type", "London", "Lease")
colnames(teStruc.Data) <- c("Price", "Date", "Type", "London", "Lease")
trStruc.Data <- trStruc.Data[order(trStruc.Data$Date), ]
teStruc.Data <- teStruc.Data[order(teStruc.Data$Date), ]
teStruc.Data$Date <- teStruc.Data$Date - min(trStruc.Data$Date)
trStruc.Data$Date <- trStruc.Data$Date - min(trStruc.Data$Date)
trStruc.X = trStruc.Data[, 2:5]
trStruc.Y = trStruc.Data[, 1]
teStruc.X = teStruc.Data[ , 2:5]
teStruc.Y = teStruc.Data[, 1]
svStruc.model <- svm(trStruc.X, trStruc.Y)
svStruc.trY <- predict(svStruc.model, trStruc.X)
svStruc.trErrors <- trStruc.Y-svStruc.trY
svStruc.trError <- sqrt(mean(svStruc.trErrors^2))
print (paste('Training RMS error is: ', svStruc.trError, sep = ""))
svStruc.teY = predict(svStruc.model, teStruc.X)
svStruc.teErrors <- teStruc.Y-svStruc.teY
svStruc.teError <- sqrt(mean(svStruc.teErrors^2))
print (paste('Testing RMS error is: ', svStruc.teError, sep = ""))
cbind(trStruc.X, svStruc.trY)
head(cbind(trStruc.X, svStruc.trY))
ggplot(cbind(trStruc.X, svStruc.trY), aes(Date, svStruc.try) ) +
geom_point() + geom_smooth()
ggplot2(cbind(trStruc.X, svStruc.trY), aes(Date, svStruc.try) ) +
geom_point() + geom_smooth()
library(ggplot2)
ggplot2(cbind(trStruc.X, svStruc.trY), aes(Date, svStruc.try) ) +
geom_point() + geom_smooth()
ggplot(cbind(trStruc.X, svStruc.trY), aes(Date, svStruc.try) ) +
geom_point() + geom_smooth()
ggplot(cbind(trStruc.X, svStruc.trY), aes(Date, svStruc.trY) ) +
geom_point() + geom_smooth()
ggplot(cbind(trStruc.X$Date, svStruc.trY), aes(Date, svStruc.trY) ) +
geom_point() + geom_smooth()
ggplot(cbind(trStruc.X[, 1], svStruc.trY), aes(Date, svStruc.trY) ) +
geom_point() + geom_smooth()
ggplot(cbind(trStruc.X$Date, svStruc.trY), aes(Date, svStruc.trY) ) +
geom_point() + geom_smooth()
a <- trStruc.X$Date
ggplot(cbind(a, svStruc.trY), aes(Date, svStruc.trY) ) +
geom_point() + geom_smooth()
ggplot(cbind(trStruc.X, svStruc.trY), aes(Date, svStruc.trY) ) +
geom_point() + geom_smooth()
ggplot(cbind(trStruc.X, svStruc.trY), aes(x=Date, y=svStruc.trY) ) +
geom_point() + geom_smooth()
ggplot(cbind(trStruc.X, svStruc.Y), aes(x=Date, y=svStruc.trY) ) +
geom_point() + geom_smooth()
ggplot(cbind(trStruc.X, trStruc.Y), aes(x=Date, y=svStruc.trY) ) +
geom_point() + geom_smooth()
ggplot(cbind(trStruc.X, trStruc.Y), aes(x=Date, y=trStruc.Y) ) +
geom_point() + geom_smooth()
# 5. we can also try knn regressor as in matlab using caret package
knnStruc.model <- knnreg(trStruc.X, trStruc.Y, 3)
knnStruc.teY <- predict(knnStruc.model, teStruc.X)
knnStruc.teError <- mean((teStruc.Y - knnStruc.teY)^2)
print (paste('Knn Testing RMS error is: ', knnStruc.teError, sep = ""))
knnStruc.model <- knnreg(trStruc.X, trStruc.Y, 3)
library(caret)
install.packages(caret)
install.packages('caret')
library(caret)
install.packages("lattice")
install.packages("lattice")
library(caret)
# 5. we can also try knn regressor as in matlab using caret package
knnStruc.model <- knnreg(trStruc.X, trStruc.Y, 3)
knnStruc.teY <- predict(knnStruc.model, teStruc.X)
knnStruc.teError <- mean((teStruc.Y - knnStruc.teY)^2)
print (paste('Knn Testing RMS error is: ', knnStruc.teError, sep = ""))
svStruc.teError <- sqrt(mean(svStruc.teErrors^2))
svStruc.teError
